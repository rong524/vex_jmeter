<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VOD_T6_mix_timebased_manifest" enabled="true">
      <stringProp name="TestPlan.comments">There is only ad decision, verify whether server could process well and client could get expected manifest.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load server configuration" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="defaultOrigin_DNS" elementType="Argument">
            <stringProp name="Argument.name">defaultOrigin_DNS</stringProp>
            <stringProp name="Argument.value">${__P(default.origin.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_1_DNS" elementType="Argument">
            <stringProp name="Argument.name">edge_1_DNS</stringProp>
            <stringProp name="Argument.value">${__P(edge_1.origin.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_2_DNS" elementType="Argument">
            <stringProp name="Argument.name">edge_2_DNS</stringProp>
            <stringProp name="Argument.value">${__P(edge_2.origin.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adContentServerDNS" elementType="Argument">
            <stringProp name="Argument.name">adContentServerDNS</stringProp>
            <stringProp name="Argument.value">${__P(adContent.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adsServerDNS" elementType="Argument">
            <stringProp name="Argument.name">adsServerDNS</stringProp>
            <stringProp name="Argument.value">${__P(ads.simulater.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acsServerDNS" elementType="Argument">
            <stringProp name="Argument.name">acsServerDNS</stringProp>
            <stringProp name="Argument.value">${__P(acs.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="core_vex_1_DNS" elementType="Argument">
            <stringProp name="Argument.name">core_vex_1_DNS</stringProp>
            <stringProp name="Argument.value">${__P(core.server_1.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="core_ui_DNS" elementType="Argument">
            <stringProp name="Argument.name">core_ui_DNS</stringProp>
            <stringProp name="Argument.value">${__P(core.ui.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="slrServerDNS" elementType="Argument">
            <stringProp name="Argument.name">slrServerDNS</stringProp>
            <stringProp name="Argument.value">${__P(slr.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="core_vex_2_DNS" elementType="Argument">
            <stringProp name="Argument.name">core_vex_2_DNS</stringProp>
            <stringProp name="Argument.value">${__P(core.server_2.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="frontEnd_1_DNS" elementType="Argument">
            <stringProp name="Argument.name">frontEnd_1_DNS</stringProp>
            <stringProp name="Argument.value">${__P(frontEnd.server_1.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="frontEnd_2_DNS" elementType="Argument">
            <stringProp name="Argument.name">frontEnd_2_DNS</stringProp>
            <stringProp name="Argument.value">${__P(frontEnd.server_2.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="director_1_DNS" elementType="Argument">
            <stringProp name="Argument.name">director_1_DNS</stringProp>
            <stringProp name="Argument.value">${__P(director.server_1.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="director_2_DNS" elementType="Argument">
            <stringProp name="Argument.name">director_2_DNS</stringProp>
            <stringProp name="Argument.value">${__P(director.server_2.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="layer7_DNS" elementType="Argument">
            <stringProp name="Argument.name">layer7_DNS</stringProp>
            <stringProp name="Argument.value">${__P(layer7.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_1_IP" elementType="Argument">
            <stringProp name="Argument.name">edge_1_IP</stringProp>
            <stringProp name="Argument.value">${__P(edge_1.origin.internal.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_2_IP" elementType="Argument">
            <stringProp name="Argument.name">edge_2_IP</stringProp>
            <stringProp name="Argument.value">${__P(edge_2.origin.internal.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adContentServerIP" elementType="Argument">
            <stringProp name="Argument.name">adContentServerIP</stringProp>
            <stringProp name="Argument.value">${__P(adContent.internal.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="defaultOrigin_IP" elementType="Argument">
            <stringProp name="Argument.name">defaultOrigin_IP</stringProp>
            <stringProp name="Argument.value">${__P(default.origin.internal.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="frontEnd" elementType="Argument">
            <stringProp name="Argument.name">frontEnd</stringProp>
            <stringProp name="Argument.value">${__P(vod.frontEnd.hostname)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="coreServer" elementType="Argument">
            <stringProp name="Argument.name">coreServer</stringProp>
            <stringProp name="Argument.value">${__P(core.server_1.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vinzIP" elementType="Argument">
            <stringProp name="Argument.name">vinzIP</stringProp>
            <stringProp name="Argument.value">${__P(vinz.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="acsIP" elementType="Argument">
            <stringProp name="Argument.name">acsIP</stringProp>
            <stringProp name="Argument.value">${__P(acs.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crDNS" elementType="Argument">
            <stringProp name="Argument.name">crDNS</stringProp>
            <stringProp name="Argument.value">${__P(cr.external.IP)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="clientIp" elementType="Argument">
            <stringProp name="Argument.name">clientIp</stringProp>
            <stringProp name="Argument.value">${__Random(1,199,)}.${__Random(1,199,)}.${__Random(1,199,)}.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zone" elementType="Argument">
            <stringProp name="Argument.name">zone</stringProp>
            <stringProp name="Argument.value">vod_zone_${__Random(1,199,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StreamType" elementType="Argument">
            <stringProp name="Argument.name">StreamType</stringProp>
            <stringProp name="Argument.value">VOD_T6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProviderId" elementType="Argument">
            <stringProp name="Argument.name">ProviderId</stringProp>
            <stringProp name="Argument.value">16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssetId" elementType="Argument">
            <stringProp name="Argument.name">AssetId</stringProp>
            <stringProp name="Argument.value">allc0000000000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DeviceId" elementType="Argument">
            <stringProp name="Argument.name">DeviceId</stringProp>
            <stringProp name="Argument.value">${__Random(1,199,)}.${__Random(1,199,)}.${__Random(1,199,)}.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentSequence" elementType="Argument">
            <stringProp name="Argument.name">currentSequence</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vodName" elementType="Argument">
            <stringProp name="Argument.name">vodName</stringProp>
            <stringProp name="Argument.value">hq</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vodLocation" elementType="Argument">
            <stringProp name="Argument.name">vodLocation</stringProp>
            <stringProp name="Argument.value">vod_primary/allcodec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyFile_1" elementType="Argument">
            <stringProp name="Argument.name">keyFile_1</stringProp>
            <stringProp name="Argument.value">772000/enc/key.dat</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyFile_2" elementType="Argument">
            <stringProp name="Argument.name">keyFile_2</stringProp>
            <stringProp name="Argument.value">https://consecservice.ccp.xcal.tv.2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyFile_3" elementType="Argument">
            <stringProp name="Argument.name">keyFile_3</stringProp>
            <stringProp name="Argument.value">https://consecservice.ccp.xcal.tv.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyFile_4" elementType="Argument">
            <stringProp name="Argument.name">keyFile_4</stringProp>
            <stringProp name="Argument.value">https://consecservice.ccp.xcal.tv.4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encryption_METHOD_1" elementType="Argument">
            <stringProp name="Argument.name">encryption_METHOD_1</stringProp>
            <stringProp name="Argument.value">AES-128</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encryption_METHOD_2" elementType="Argument">
            <stringProp name="Argument.name">encryption_METHOD_2</stringProp>
            <stringProp name="Argument.value">SAMPLE-AES</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encryption_METHOD_3" elementType="Argument">
            <stringProp name="Argument.name">encryption_METHOD_3</stringProp>
            <stringProp name="Argument.value">AES-128</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="encryption_METHOD_4" elementType="Argument">
            <stringProp name="Argument.name">encryption_METHOD_4</stringProp>
            <stringProp name="Argument.value">AES-128</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IV_1" elementType="Argument">
            <stringProp name="Argument.name">IV_1</stringProp>
            <stringProp name="Argument.value">0x9c7db8778570d05c3177c349fd9236aa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IV_2" elementType="Argument">
            <stringProp name="Argument.name">IV_2</stringProp>
            <stringProp name="Argument.value">0xc055ee9f6c1eb7aa50bfab02b0814972</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IV_3" elementType="Argument">
            <stringProp name="Argument.name">IV_3</stringProp>
            <stringProp name="Argument.value">0x9c7db8778570d05c3177c349fduy5667</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IV_4" elementType="Argument">
            <stringProp name="Argument.name">IV_4</stringProp>
            <stringProp name="Argument.value">0x9c7db8778570d05c3177c34978900kl90</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyformatversion_1" elementType="Argument">
            <stringProp name="Argument.name">keyformatversion_1</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyformat_1" elementType="Argument">
            <stringProp name="Argument.name">keyformat_1</stringProp>
            <stringProp name="Argument.value">apple</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="messageId" elementType="Argument">
            <stringProp name="Argument.name">messageId</stringProp>
            <stringProp name="Argument.value">msg_${__UUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="identityId" elementType="Argument">
            <stringProp name="Argument.name">identityId</stringProp>
            <stringProp name="Argument.value">ads_${__UUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PartnerId" elementType="Argument">
            <stringProp name="Argument.name">PartnerId</stringProp>
            <stringProp name="Argument.value">private:Cox</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_dtz" elementType="Argument">
            <stringProp name="Argument.name">client_dtz</stringProp>
            <stringProp name="Argument.value">2015-02-01T11:25:45+05:00</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceId" elementType="Argument">
            <stringProp name="Argument.name">ServiceId</stringProp>
            <stringProp name="Argument.value">VOD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_dtz_ec" elementType="Argument">
            <stringProp name="Argument.name">client_dtz_ec</stringProp>
            <stringProp name="Argument.value">2015-02-01T11%3A25%3A45%2B05%3A00</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PartnerId_ec" elementType="Argument">
            <stringProp name="Argument.name">PartnerId_ec</stringProp>
            <stringProp name="Argument.value">private%3ACox</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyNumber_expect" elementType="Argument">
            <stringProp name="Argument.name">keyNumber_expect</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NoneKeyNumber_expect" elementType="Argument">
            <stringProp name="Argument.name">NoneKeyNumber_expect</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Discontinuity_expect" elementType="Argument">
            <stringProp name="Argument.name">Discontinuity_expect</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AdNumber_expect" elementType="Argument">
            <stringProp name="Argument.name">AdNumber_expect</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PrimarySegmentsNumber_expect" elementType="Argument">
            <stringProp name="Argument.name">PrimarySegmentsNumber_expect</stringProp>
            <stringProp name="Argument.value">14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FaxsCMTag_expect" elementType="Argument">
            <stringProp name="Argument.name">FaxsCMTag_expect</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_1_Start" elementType="Argument">
            <stringProp name="Argument.name">NPT_1_Start</stringProp>
            <stringProp name="Argument.value">1.981</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_1_End" elementType="Argument">
            <stringProp name="Argument.name">NPT_1_End</stringProp>
            <stringProp name="Argument.value">5.137</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_2_Start" elementType="Argument">
            <stringProp name="Argument.name">NPT_2_Start</stringProp>
            <stringProp name="Argument.value">13.123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_2_End" elementType="Argument">
            <stringProp name="Argument.name">NPT_2_End</stringProp>
            <stringProp name="Argument.value">17.129</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_3_Start" elementType="Argument">
            <stringProp name="Argument.name">NPT_3_Start</stringProp>
            <stringProp name="Argument.value">23</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_3_End" elementType="Argument">
            <stringProp name="Argument.name">NPT_3_End</stringProp>
            <stringProp name="Argument.value">29.162</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_4_Start" elementType="Argument">
            <stringProp name="Argument.name">NPT_4_Start</stringProp>
            <stringProp name="Argument.value">35.14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_4_End" elementType="Argument">
            <stringProp name="Argument.name">NPT_4_End</stringProp>
            <stringProp name="Argument.value">39.16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_5_Start" elementType="Argument">
            <stringProp name="Argument.name">NPT_5_Start</stringProp>
            <stringProp name="Argument.value">41.5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_5_End" elementType="Argument">
            <stringProp name="Argument.name">NPT_5_End</stringProp>
            <stringProp name="Argument.value">EOS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="audio_1" elementType="Argument">
            <stringProp name="Argument.name">audio_1</stringProp>
            <stringProp name="Argument.value">hq_audio_20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="audio_2" elementType="Argument">
            <stringProp name="Argument.name">audio_2</stringProp>
            <stringProp name="Argument.value">hq_audio_40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iframe_1" elementType="Argument">
            <stringProp name="Argument.name">iframe_1</stringProp>
            <stringProp name="Argument.value">hq_iframe_90</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iframe_2" elementType="Argument">
            <stringProp name="Argument.name">iframe_2</stringProp>
            <stringProp name="Argument.value">hq_iframe_190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iframe_3" elementType="Argument">
            <stringProp name="Argument.name">iframe_3</stringProp>
            <stringProp name="Argument.value">hq_iframe_290</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iframe_4" elementType="Argument">
            <stringProp name="Argument.name">iframe_4</stringProp>
            <stringProp name="Argument.value">hq_iframe_390</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="video_1" elementType="Argument">
            <stringProp name="Argument.name">video_1</stringProp>
            <stringProp name="Argument.value">hq_med_105</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="video_2" elementType="Argument">
            <stringProp name="Argument.name">video_2</stringProp>
            <stringProp name="Argument.value">hq_med_300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="video_3" elementType="Argument">
            <stringProp name="Argument.name">video_3</stringProp>
            <stringProp name="Argument.value">hq_med_500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="video_4" elementType="Argument">
            <stringProp name="Argument.name">video_4</stringProp>
            <stringProp name="Argument.value">hq_med_700</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resource_url" elementType="Argument">
            <stringProp name="Argument.name">resource_url</stringProp>
            <stringProp name="Argument.value">thistech/all/ec3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_resource_url" elementType="Argument">
            <stringProp name="Argument.name">edge_resource_url</stringProp>
            <stringProp name="Argument.value">ccc3/ddd3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ad_resource_url" elementType="Argument">
            <stringProp name="Argument.name">ad_resource_url</stringProp>
            <stringProp name="Argument.value">ad/comcast</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ad_edge_resource_url" elementType="Argument">
            <stringProp name="Argument.name">ad_edge_resource_url</stringProp>
            <stringProp name="Argument.value">tt/ad</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NoneKeyNumber_expect_1" elementType="Argument">
            <stringProp name="Argument.name">NoneKeyNumber_expect_1</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyNumber_expect_2" elementType="Argument">
            <stringProp name="Argument.name">keyNumber_expect_2</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssetId_2" elementType="Argument">
            <stringProp name="Argument.name">AssetId_2</stringProp>
            <stringProp name="Argument.value">abcd0123456789000009</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vodLocation_2" elementType="Argument">
            <stringProp name="Argument.name">vodLocation_2</stringProp>
            <stringProp name="Argument.value">vod_hq/all_sap</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resource_url_2" elementType="Argument">
            <stringProp name="Argument.name">resource_url_2</stringProp>
            <stringProp name="Argument.value">thistech/all_sap_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_resource_url_2" elementType="Argument">
            <stringProp name="Argument.name">edge_resource_url_2</stringProp>
            <stringProp name="Argument.value">allsap2/comcast/edge2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ad_2_resource_url" elementType="Argument">
            <stringProp name="Argument.name">ad_2_resource_url</stringProp>
            <stringProp name="Argument.value">ad_2/comcast</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AssetId_1" elementType="Argument">
            <stringProp name="Argument.name">AssetId_1</stringProp>
            <stringProp name="Argument.value">abcd0123456789000008</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vodLocation_1" elementType="Argument">
            <stringProp name="Argument.name">vodLocation_1</stringProp>
            <stringProp name="Argument.value">vod_hq/all_sap</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resource_url_1" elementType="Argument">
            <stringProp name="Argument.name">resource_url_1</stringProp>
            <stringProp name="Argument.value">thistech/all_sap_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="edge_resource_url_1" elementType="Argument">
            <stringProp name="Argument.name">edge_resource_url_1</stringProp>
            <stringProp name="Argument.value">aa1/comcast/edge1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Discontinuity_expect_2" elementType="Argument">
            <stringProp name="Argument.name">Discontinuity_expect_2</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_1_Start_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_1_Start_a</stringProp>
            <stringProp name="Argument.value">BOS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_1_End_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_1_End_a</stringProp>
            <stringProp name="Argument.value">2.024</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_2_Start_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_2_Start_a</stringProp>
            <stringProp name="Argument.value">8.007</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_2_End_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_2_End_a</stringProp>
            <stringProp name="Argument.value">12.013</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_3_Start_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_3_Start_a</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_3_End_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_3_End_a</stringProp>
            <stringProp name="Argument.value">29.141</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_4_Start_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_4_Start_a</stringProp>
            <stringProp name="Argument.value">30.02</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_4_End_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_4_End_a</stringProp>
            <stringProp name="Argument.value">36.037</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_5_Start_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_5_Start_a</stringProp>
            <stringProp name="Argument.value">44.043</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NPT_5_End_a" elementType="Argument">
            <stringProp name="Argument.name">NPT_5_End_a</stringProp>
            <stringProp name="Argument.value">EOS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyNumber_expect_1" elementType="Argument">
            <stringProp name="Argument.name">keyNumber_expect_1</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyformat_2" elementType="Argument">
            <stringProp name="Argument.name">keyformat_2</stringProp>
            <stringProp name="Argument.value">apple_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="session_id" elementType="Argument">
            <stringProp name="Argument.name">session_id</stringProp>
            <stringProp name="Argument.value">vex_${__UUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie " enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="zone" elementType="Cookie" testname="zone">
            <stringProp name="Cookie.value">${zone}</stringProp>
            <stringProp name="Cookie.domain"></stringProp>
            <stringProp name="Cookie.path"></stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <stringProp name="CookieManager.policy">netscape</stringProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1388991662000</longProp>
        <longProp name="ThreadGroup.end_time">1388991662000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Forwarded-For</stringProp>
              <stringProp name="Header.value">${clientIp}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">channelType</stringProp>
              <stringProp name="Header.value">Vod</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">zone</stringProp>
              <stringProp name="Header.value">${zone}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">timebase</stringProp>
              <stringProp name="Header.value">true</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resetEdgeOriginServer" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/api/vodcdvrAds/reset</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on default orgin" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on edge_1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on edge_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on default orgin" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on edge_1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on edge_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getPrimaryContentIndex" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is no ad signal.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-721763217">#EXT-X-FAXS-CM:URI</stringProp>
              <stringProp name="-261923098">#EXT-X-STREAM-INF:PROGRAM-ID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is no any signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAd1Content" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adContentServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${ad1}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is no ad signal.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-721763217">#EXT-X-FAXS-CM:URI</stringProp>
              <stringProp name="-261923098">#EXT-X-STREAM-INF:PROGRAM-ID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is no any signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">AdbiterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Encrypting primary content on head for all" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
     &lt;EXTKeySettings&gt;&#xd;
         &lt;EXTKeySetting&gt;&#xd;
            &lt;position&gt;3&lt;/position&gt;&#xd;
            &lt;method&gt;${encryption_METHOD_1}&lt;/method&gt;&#xd;
           &lt;URI&gt;${keyFile_1}&lt;/URI&gt;&#xd;
            &lt;IV&gt;${IV_1}&lt;/IV&gt;&#xd;
            &lt;KEYFORMAT&gt;${keyformat_1}&lt;/KEYFORMAT&gt;&#xd;
            &lt;KEYFORMATVERSIONS&gt;${keyformatversion_1}&lt;/KEYFORMATVERSIONS&gt;&#xd;
         &lt;/EXTKeySetting&gt;&#xd;
     &lt;/EXTKeySettings&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header?assetName=${vodLocation}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Encrypting primary content on header for all_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
     &lt;EXTKeySettings&gt;&#xd;
         &lt;EXTKeySetting&gt;&#xd;
            &lt;position&gt;3&lt;/position&gt;&#xd;
               &lt;method&gt;${encryption_METHOD_2}&lt;/method&gt;&#xd;
           &lt;URI&gt;${keyFile_1}&lt;/URI&gt;&#xd;
            &lt;IV&gt;${IV_1}&lt;/IV&gt;&#xd;
            &lt;KEYFORMAT&gt;${keyformat_2}&lt;/KEYFORMAT&gt;&#xd;
            &lt;KEYFORMATVERSIONS&gt;${keyformatversion_1}&lt;/KEYFORMATVERSIONS&gt;&#xd;
           &#xd;
         &lt;/EXTKeySetting&gt;&#xd;
     &lt;/EXTKeySettings&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header?assetName=${vodLocation_2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Encrypting primary content on segments for all_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
     &lt;EXTKeySettings&gt;&#xd;
         &lt;EXTKeySetting&gt;&#xd;
            &lt;position&gt;2&lt;/position&gt;&#xd;
            &lt;method&gt;${encryption_METHOD_2}&lt;/method&gt;&#xd;
            &lt;URI&gt;${keyFile_2}&lt;/URI&gt;&#xd;
            &lt;IV&gt;${IV_1}&lt;/IV&gt;&#xd;
            &lt;KEYFORMAT&gt;${keyformat_1}&lt;/KEYFORMAT&gt;&#xd;
            &lt;KEYFORMATVERSIONS&gt;${keyformatversion_1}&lt;/KEYFORMATVERSIONS&gt;&#xd;
         &lt;/EXTKeySetting&gt;&#xd;
       &lt;EXTKeySetting&gt;&#xd;
            &lt;position&gt;10&lt;/position&gt;&#xd;
            &lt;method&gt;${encryption_METHOD_3}&lt;/method&gt;&#xd;
            &lt;URI&gt;${keyFile_3}&lt;/URI&gt;&#xd;
            &lt;IV&gt;${IV_2}&lt;/IV&gt;&#xd;
         &lt;/EXTKeySetting&gt;&#xd;
        &#xd;
     &lt;/EXTKeySettings&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced?assetName=${vodLocation_2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Encrypting primary content on head for all_1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
     &lt;EXTKeySettings&gt;&#xd;
         &lt;EXTKeySetting&gt;&#xd;
            &lt;position&gt;3&lt;/position&gt;&#xd;
            &lt;method&gt;NONE&lt;/method&gt;&#xd;
           &#xd;
         &lt;/EXTKeySetting&gt;&#xd;
     &lt;/EXTKeySettings&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header?assetName=${vodLocation_1}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setResponseTemplate-MixRoll" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
&lt;adm:PlacementResponse xmlns:ns18=&quot;http://www.thistech.com/schemas/1_0/opportunity&quot;&#xd;
	xmlns:title=&quot;urn:cablelabs:md:xsd:title:3.0&quot; xmlns:terms=&quot;urn:cablelabs:md:xsd:terms:3.0&quot;&#xd;
	xmlns:content=&quot;urn:cablelabs:md:xsd:content:3.0&quot; xmlns:offer=&quot;urn:cablelabs:md:xsd:offer:3.0&quot;&#xd;
	xmlns:signaling=&quot;urn:cablelabs:md:xsd:signaling:3.0&quot; xmlns:po=&quot;urn:cablelabs:md:xsd:placementopportunity:3.0&quot;&#xd;
	xmlns:adi3=&quot;urn:cablelabs:md:xsd:core:3.0&quot; xmlns:pois=&quot;http://www.scte.org/schemas/130-5/2010/pois&quot;&#xd;
	xmlns:tbtv=&quot;http://www.tandbergtv.com/schemas/130-ext/2008a/ext&quot;&#xd;
	xmlns:gis=&quot;http://www.scte.org/schemas/130-8/2010a/gis&quot; xmlns:podm=&quot;http://www.scte.org/schemas/130-3/2008a/adm/podm&quot;&#xd;
	xmlns:slr=&quot;http://www.thistech.com/schemas/1_0/spotlink&quot; xmlns:vmap=&quot;http://www.iab.net/vmap-1.0&quot;&#xd;
	xmlns:core=&quot;http://www.scte.org/schemas/130-2/2008a/core&quot; xmlns:adm=&quot;http://www.scte.org/schemas/130-3/2008a/adm&quot;&#xd;
	xmlns:cmcp1=&quot;http://www.comcast.com/schemas/NGOD/P1/2012/R1V0&quot;&#xd;
	xmlns:cmcst=&quot;http://www.comcast.com/schemas/NGOD/P1/2012/R1V0&quot;&#xd;
	messageRef=&quot;caef9c27-a10a-44b2-9b2d-1ce13be9866a&quot; messageId=&quot;${messageId}&quot;&#xd;
	version=&quot;1.1&quot; identity=&quot;${identityId}&quot; system=&quot;spotlink-auditude-support&quot;&gt;&#xd;
	&lt;core:StatusCode class=&quot;0&quot; /&gt;&#xd;
	&#xd;
	&lt;adm:PlacementDecision id=&quot;V3dVdTh2SmlFZU9vL0JEZHNkdmYzUT09&quot;&gt;&#xd;
		&lt;adm:Entertainment&gt;&#xd;
			&lt;core:Content&gt;&#xd;
				&lt;core:AssetRef providerID=&quot;xidio&quot;&#xd;
					assetID=&quot;04a436853d442f7edb27c9382146f9ec&quot; /&gt;&#xd;
			&lt;/core:Content&gt;&#xd;
			&lt;adm:EntertainmentNPT scale=&quot;1.0&quot;&gt;${NPT_1_Start}-${NPT_1_End}&#xd;
			&lt;/adm:EntertainmentNPT&gt;&#xd;
		&lt;/adm:Entertainment&gt;&#xd;
		&lt;core:Ext&gt;&#xd;
			&lt;cmcp1:PlayPositions&gt;&#xd;
				&lt;cmcp1:PlayPositionStart&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;0.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionStart&gt;&#xd;
				&lt;cmcp1:PlayPositionEnd&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;36.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionEnd&gt;&#xd;
			&lt;/cmcp1:PlayPositions&gt;&#xd;
		&lt;/core:Ext&gt;&#xd;
	&lt;/adm:PlacementDecision&gt;&#xd;
		&#xd;
	&lt;adm:PlacementDecision id=&quot;V3dVdTh2SmlFZU9vL0JEZHNkdmYzUT09&quot;&gt;&#xd;
		&lt;adm:Entertainment&gt;&#xd;
			&lt;core:Content&gt;&#xd;
				&lt;core:AssetRef providerID=&quot;xidio&quot;&#xd;
					assetID=&quot;04a436853d442f7edb27c9382146f9ec&quot; /&gt;&#xd;
			&lt;/core:Content&gt;&#xd;
			&lt;adm:EntertainmentNPT scale=&quot;1.0&quot;&gt;${NPT_2_Start}-${NPT_2_End}&#xd;
			&lt;/adm:EntertainmentNPT&gt;&#xd;
		&lt;/adm:Entertainment&gt;&#xd;
		&lt;core:Ext&gt;&#xd;
			&lt;cmcp1:PlayPositions&gt;&#xd;
				&lt;cmcp1:PlayPositionStart&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;50.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionStart&gt;&#xd;
				&lt;cmcp1:PlayPositionEnd&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;60.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionEnd&gt;&#xd;
			&lt;/cmcp1:PlayPositions&gt;&#xd;
		&lt;/core:Ext&gt;&#xd;
	&lt;/adm:PlacementDecision&gt;&#xd;
		&#xd;
		&lt;adm:PlacementDecision id=&quot;V3dVdTh2SmlFZU9vL0JEZHNkdmYzUT09&quot;&gt;&#xd;
		&lt;adm:Entertainment&gt;&#xd;
			&lt;core:Content&gt;&#xd;
				&lt;core:AssetRef providerID=&quot;xidio&quot;&#xd;
					assetID=&quot;04a436853d442f7edb27c9382146f9ec&quot; /&gt;&#xd;
			&lt;/core:Content&gt;&#xd;
			&lt;adm:EntertainmentNPT scale=&quot;1.0&quot;&gt;${NPT_3_Start}-${NPT_3_End}&#xd;
			&lt;/adm:EntertainmentNPT&gt;&#xd;
		&lt;/adm:Entertainment&gt;&#xd;
		&lt;core:Ext&gt;&#xd;
			&lt;cmcp1:PlayPositions&gt;&#xd;
				&lt;cmcp1:PlayPositionStart&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;60.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionStart&gt;&#xd;
			&lt;/cmcp1:PlayPositions&gt;&#xd;
		&lt;/core:Ext&gt;&#xd;
	&lt;/adm:PlacementDecision&gt;&#xd;
	&#xd;
	&#xd;
		&lt;adm:PlacementDecision id=&quot;V3dVdTh2SmlFZU9vL0JEZHNkdmYzUT09&quot;&gt;&#xd;
		&lt;adm:Entertainment&gt;&#xd;
			&lt;core:Content&gt;&#xd;
				&lt;core:AssetRef providerID=&quot;xidio&quot;&#xd;
					assetID=&quot;04a436853d442f7edb27c9382146f9ec&quot; /&gt;&#xd;
			&lt;/core:Content&gt;&#xd;
			&lt;adm:EntertainmentNPT scale=&quot;1.0&quot;&gt;${NPT_4_Start}-${NPT_4_End}&#xd;
			&lt;/adm:EntertainmentNPT&gt;&#xd;
		&lt;/adm:Entertainment&gt;&#xd;
		&lt;core:Ext&gt;&#xd;
			&lt;cmcp1:PlayPositions&gt;&#xd;
				&lt;cmcp1:PlayPositionStart&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;60.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionStart&gt;&#xd;
			&lt;/cmcp1:PlayPositions&gt;&#xd;
		&lt;/core:Ext&gt;&#xd;
	&lt;/adm:PlacementDecision&gt;&#xd;
		&#xd;
		&lt;adm:PlacementDecision id=&quot;V3dVdTh2SmlFZU9vL0JEZHNkdmYzUT09&quot;&gt;&#xd;
		&lt;adm:Entertainment&gt;&#xd;
			&lt;core:Content&gt;&#xd;
				&lt;core:AssetRef providerID=&quot;xidio&quot;&#xd;
					assetID=&quot;04a436853d442f7edb27c9382146f9ec&quot; /&gt;&#xd;
			&lt;/core:Content&gt;&#xd;
			&lt;adm:EntertainmentNPT scale=&quot;1.0&quot;&gt;${NPT_5_Start}-${NPT_5_End}&#xd;
			&lt;/adm:EntertainmentNPT&gt;&#xd;
		&lt;/adm:Entertainment&gt;&#xd;
		&lt;core:Ext&gt;&#xd;
			&lt;cmcp1:PlayPositions&gt;&#xd;
				&lt;cmcp1:PlayPositionStart&gt;&#xd;
					&lt;cmcp1:NPTOffset&gt;60.000&lt;/cmcp1:NPTOffset&gt;&#xd;
				&lt;/cmcp1:PlayPositionStart&gt;&#xd;
			&lt;/cmcp1:PlayPositions&gt;&#xd;
		&lt;/core:Ext&gt;&#xd;
	&lt;/adm:PlacementDecision&gt;		&#xd;
&lt;/adm:PlacementResponse&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spotlink-router/adsrs/SetResponseTemplate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMasterPlaylistOnDefaultOrigin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is no ad signal.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-721763217">#EXT-X-FAXS-CM:URI</stringProp>
              <stringProp name="-261923098">#EXT-X-STREAM-INF:PROGRAM-ID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is no any signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMediaPlaylistOnDefaultOrigin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation}/${biterateContentOrigin_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="495874652">#EXT-X-SIGNAL-START:SignalID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMasterPlaylistOnEdge_2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_2}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is no ad signal.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-721763217">#EXT-X-FAXS-CM:URI</stringProp>
              <stringProp name="-261923098">#EXT-X-STREAM-INF:PROGRAM-ID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is no any signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SAPbiterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(hq_sap.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMediaPlaylistOnEdge_2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_2}/${biterateContentOrigin_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="495874652">#EXT-X-SIGNAL-START:SignalID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMediaPlaylistOnEdge_2ForSAP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_1}/${SAPbiterateContentOrigin_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="495874652">#EXT-X-SIGNAL-START:SignalID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMasterPlaylistOnEdge_1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_1}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is no ad signal.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-721763217">#EXT-X-FAXS-CM:URI</stringProp>
              <stringProp name="-261923098">#EXT-X-STREAM-INF:PROGRAM-ID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is no any signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(med.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContentFromOrigin" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SAPbiterateContentOrigin</stringProp>
            <stringProp name="RegexExtractor.regex">(sap.*.m3u8)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMediaPlaylistOnEdge_1ForVideo" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_1}/${biterateContentOrigin_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="495874652">#EXT-X-SIGNAL-START:SignalID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set global edge " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;rules&gt;&#xd;
     &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://${defaultOrigin_IP}:8080/origin/playlists/${vodLocation}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;  &#xd;
      &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url_1}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://${edge_1_IP}:8080/origin/playlists/${vodLocation_1}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;   &#xd;
      &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url_2}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://${edge_2_IP}:8080/origin/playlists/${vodLocation_2}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;  &#xd;
&lt;/rules&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crDNS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/setDefaultAssetRedirectRules</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set client edge" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;rules&gt;&#xd;
     &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://primary_fake_edge/${edge_resource_url}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;&#xd;
&#xd;
     &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url_1}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://primary_1_fake_edge/${edge_resource_url_1}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;&#xd;
      &lt;rule&gt;&#xd;
         &lt;originalAsset&gt;${resource_url_2}/index.m3u8&lt;/originalAsset&gt;&#xd;
         &lt;redirectURL&gt;http://primary_2_fake_edge/${edge_resource_url_2}/index.m3u8&lt;/redirectURL&gt;&#xd;
     &lt;/rule&gt;      &#xd;
&lt;/rules&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crDNS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/setAssetRedirectRules</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getMediaPlaylistOnEdge_1ForSAP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/playlists/${vodLocation_1}/${SAPbiterateContentOrigin_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check playlist from origin" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="495874652">#EXT-X-SIGNAL-START:SignalID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="One client request AAC which has encrypted key on header:" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1394881076000</longProp>
        <longProp name="ThreadGroup.end_time">1394881076000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Forwarded-For</stringProp>
              <stringProp name="Header.value">${clientIp}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">channelType</stringProp>
              <stringProp name="Header.value">Vod</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">zone</stringProp>
              <stringProp name="Header.value">${zone}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">timebase</stringProp>
              <stringProp name="Header.value">true</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Playback-Session-Id</stringProp>
              <stringProp name="Header.value">${session_id}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cox: Index request for a content which has encrypted key on header" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ProviderId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ProviderId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ProviderId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="AssetId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssetId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">AssetId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="StreamType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${StreamType}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">StreamType</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="DeviceId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${DeviceId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">DeviceId</stringProp>
              </elementProp>
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${session_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
              </elementProp>
              <elementProp name="PartnerId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${PartnerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PartnerId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="dtz" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${client_dtz}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">dtz</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${frontEnd}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${resource_url}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get index manifest After ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getSessionIdInRP" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sid_pre</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/mm.*&amp;sid=(.*)&amp;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2113060865">http://${frontEnd}/${edge_resource_url}</stringProp>
              <stringProp name="558282743">#EXT-X-FAXS-CM:URI=&quot;http://primary_fake_edge/${edge_resource_url}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is variant manifest url is contained in response</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">(http:\/\/mm.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getSAPBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SAPBiterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">#EXT-X-MEDIA:TYPE=AUDIO.*(http:\/\/mm.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getIframeBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">iFrameBiterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">#EXT-X-I-FRAME.*(http:\/\/mm.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract SessionId" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;sid is&quot; + &quot;${sid_pre}&quot;);

String sid_pre = &quot;${sid_pre}&quot;;

String[] lines=sid_pre.split(&quot;&amp;&quot;);

String sid_post=lines[0];
System.out.println(&quot;sid_post =&quot;+sid_post);
vars.put(&quot;sid&quot;,sid_post);
System.out.println(&quot;sid is&quot; + vars.get(&quot;sid&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(bitrateURL,${biterateContent_1})};
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="audioBiterate-20" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-470535669">http://primary_fake_edge/${edge_resource_url}/hq_audio_20/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="false">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="audioBiterate-40" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-863562679">http://primary_fake_edge/${edge_resource_url}/hq_audio_40/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-90" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-305760142">http://primary_fake_edge/${edge_resource_url}/hq_iframe_90/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-190" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-789858511">http://primary_fake_edge/${edge_resource_url}/hq_iframe_190/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-300" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_5}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1330644000">http://primary_fake_edge/${edge_resource_url}/hq_med_300/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-500" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-629579422">http://primary_fake_edge/${edge_resource_url}/hq_med_500/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-700" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_9}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="71485156">http://primary_fake_edge/${edge_resource_url}/hq_med_700/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-100" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2031708578">http://primary_fake_edge/${edge_resource_url}/hq_med_100/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-290" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1708157426">http://primary_fake_edge/${edge_resource_url}/hq_iframe_290/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-390" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88793933">http://primary_fake_edge/${edge_resource_url}/hq_iframe_390/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1610883576">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-460247124">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-36264524">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="599766326">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="599766326">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-36264524">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-460247124">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1610883576">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_5}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1471364374">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-jp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_6}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="297257171">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_jp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1422468174">http://primary_fake_edge/${edge_resource_url}/hq_sap_700_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_8}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1225351022">http://primary_fake_edge/${edge_resource_url}/hq_sap_700_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_9}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check Placement request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/spotlink-router/adsrs/checkSID/${sid}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetPlacementRequestCallNumber" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Times</stringProp>
            <stringProp name="RegexExtractor.regex">d.*(\d+).*t</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetPartnerId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PartnerIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:Scope&gt;(.*)&lt;/adm:Scope&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getProductType" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ProductTypeInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:ProductType&gt;(.*)&lt;/adm:ProductType&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDeviceId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">DeviceIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&quot;DEVICEID&quot;&gt;(.*)&lt;/adm:TerminalAddress&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDtz" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">dtzInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;core:CurrentDateTime&gt;(.*)&lt;/core:CurrentDateTime&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getServiceId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ServiceIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:Service id=&quot;(.*)&quot;&gt;&lt;adm:ProductType&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify call placement request times" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;vex sended placement request times: &quot; + ${Times_1});

int prTime = ${Times_1};
int expectTime = 1;
if (prTime==expectTime)
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Placemen request is expected to be called &quot; +expectTime+&quot; times ,but it was called &quot; + prTime +&quot; times&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify partnerId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Partner Id set by client: &quot; + &quot;${PartnerId}&quot;);
System.out.println(&quot;Partner Id in PR is : &quot; + &quot;${PartnerIdInPR_1}&quot;);

if (&quot;${PartnerIdInPR_1}&quot;.equals(&quot;${PartnerId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Partner Id was set &quot; +&quot;${PartnerId}&quot;+&quot; by client ,but it was sent out &quot; + &quot;${PartnerIdInPR_1}&quot; +&quot; by vex&quot;;
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify partner Product Type" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Provider Type : &quot; + &quot;${ProductTypeInPR_1}&quot;);

if (&quot;${ProductTypeInPR_1}&quot;.equals(&quot;${StreamType}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Provider Type was send by client is &quot; +&quot;${StreamType}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${ProductTypeInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify DeviceId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Device Id : &quot; + &quot;${DeviceIdInPR_1}&quot;);

if (&quot;${DeviceIdInPR_1}&quot;.equals(&quot;${DeviceId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Device Id was send by client is &quot; +&quot;${DeviceId}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${DeviceIdInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify DTZ" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Current Data time is : &quot; + ${dtzInPR_matchNr});
System.out.println(&quot;Time set by client is : &quot;+ &quot;${client_dtz}&quot;);
System.out.println(&quot;Time in placement request is : &quot;+ &quot;${dtzInPR_1}&quot;);

if (${dtzInPR_matchNr}==1 &amp;&amp; &quot;${client_dtz}&quot;.equals(&quot;${dtzInPR_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot;the count of dtz set in placement request was &quot;+${dtzInPR_matchNr +&quot; or dtz in client request is not same with the one in placement request.&quot;};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ServiceId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ServiceIdInPR : &quot; + &quot;${ServiceIdInPR_1}&quot;);

if (&quot;${ServiceIdInPR_1}&quot;.equals(&quot;${ServiceId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Service Id should be  &quot; +&quot;${ServiceId}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${ServiceIdInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check vex not send placement request" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="218685603">is not called till now.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="send EndAll PSN" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Client post EndAll psn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;adm:PlacementStatusNotification identity=&quot;86CF2E98-AEBA-4C3A-A3D4-616CF7D74A79&quot; version=&quot;1.1&quot;&#xd;
    messageId=&quot;69a360dd-4e8e-4af4-a333-52abc620e6c9&quot;&#xd;
    xmlns:adm=&quot;http://www.scte.org/schemas/130-3/2008a/adm&quot;&#xd;
    xmlns:core=&quot;http://www.scte.org/schemas/130-2/2008a/core&quot;&gt;&#xd;
    &lt;adm:PlayData identityADS=&quot;1ea15585-1075-4833-86c6-9321695b5ce4&quot;&gt;&#xd;
        &lt;adm:SystemContext&gt;&#xd;
            &lt;adm:Session&gt;${sid}&lt;/adm:Session&gt;&#xd;
        &lt;/adm:SystemContext&gt;&#xd;
        &lt;adm:Client&gt;&#xd;
            &lt;adm:TerminalAddress type=&quot;DEVICEID&quot;&gt;${DeviceId}&#xd;
            &lt;/adm:TerminalAddress&gt;&#xd;
        &lt;/adm:Client&gt;&#xd;
        &lt;adm:Events&gt;&#xd;
            &lt;adm:PlacementStatusEvent time=&quot;2011-06-28T19:56:19.653Z&quot; type=&quot;endAll&quot;&#xd;
                messageRef=&quot;942bad6c-6a55-4dbb-9ff3-d3912c706049&quot;/&gt;&#xd;
        &lt;/adm:Events&gt;&#xd;
    &lt;/adm:PlayData&gt;&#xd;
&lt;/adm:PlacementStatusNotification&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${frontEnd}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/vex-director/PlacementStatusNotification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="check EndAll PSN" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check EndAll PSN " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
            <stringProp name="HTTPSampler.port">8088</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">spotlink-router/adsrs/checkEndAll/${sid}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check PSN from ADS" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="771166160">endAll is called 1 times</stringProp>
                <stringProp name="-71357187">type=&quot;endAll&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check PSN from ADS" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1932608277">is not called till now</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="One client request AAC which has encrypted key on header:" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1394881076000</longProp>
        <longProp name="ThreadGroup.end_time">1394881076000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Forwarded-For</stringProp>
              <stringProp name="Header.value">${clientIp}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">channelType</stringProp>
              <stringProp name="Header.value">Vod</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">zone</stringProp>
              <stringProp name="Header.value">${zone}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">timebase</stringProp>
              <stringProp name="Header.value">true</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Playback-Session-Id</stringProp>
              <stringProp name="Header.value">${session_id}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cox: Index request for a content which has encrypted key on header" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ProviderId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ProviderId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ProviderId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="AssetId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssetId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">AssetId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="StreamType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${StreamType}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">StreamType</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="DeviceId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${DeviceId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">DeviceId</stringProp>
              </elementProp>
              <elementProp name="sid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${session_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sid</stringProp>
              </elementProp>
              <elementProp name="PartnerId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${PartnerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PartnerId</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
              <elementProp name="dtz" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${client_dtz}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">dtz</stringProp>
                <stringProp name="Argument.desc">false</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${frontEnd}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${resource_url}/index.m3u8</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get index manifest After ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getSessionIdInRP" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sid_pre</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/mm.*&amp;sid=(.*)&amp;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2113060865">http://${frontEnd}/${edge_resource_url}</stringProp>
              <stringProp name="558282743">#EXT-X-FAXS-CM:URI=&quot;http://primary_fake_edge/${edge_resource_url}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is variant manifest url is contained in response</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">biterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">(http:\/\/mm.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getSAPBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SAPBiterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">#EXT-X-MEDIA:TYPE=AUDIO.*(http:\/\/mm.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getIframeBiterateContent" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">iFrameBiterateContent</stringProp>
            <stringProp name="RegexExtractor.regex">#EXT-X-I-FRAME.*(http:\/\/mm.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">Fetch the included url for next request to get  variant manifest</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract SessionId" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;sid is&quot; + &quot;${sid_pre}&quot;);

String sid_pre = &quot;${sid_pre}&quot;;

String[] lines=sid_pre.split(&quot;&amp;&quot;);

String sid_post=lines[0];
System.out.println(&quot;sid_post =&quot;+sid_post);
vars.put(&quot;sid&quot;,sid_post);
System.out.println(&quot;sid is&quot; + vars.get(&quot;sid&quot;));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">response/</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">true</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.variablename">indexrequestresponse</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="audioBiterate-20" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__property(bitrateURL)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-470535669">http://primary_fake_edge/${edge_resource_url}/hq_audio_20/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <SampleTimeout guiclass="SampleTimeoutGui" testclass="SampleTimeout" testname="Sample Timeout" enabled="true">
            <stringProp name="InterruptTimer.timeout">10000</stringProp>
          </SampleTimeout>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="audioBiterate-40" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-863562679">http://primary_fake_edge/${edge_resource_url}/hq_audio_40/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-90" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-305760142">http://primary_fake_edge/${edge_resource_url}/hq_iframe_90/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-190" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-789858511">http://primary_fake_edge/${edge_resource_url}/hq_iframe_190/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-300" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_5}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1330644000">http://primary_fake_edge/${edge_resource_url}/hq_med_300/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-500" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-629579422">http://primary_fake_edge/${edge_resource_url}/hq_med_500/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-700" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_9}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="71485156">http://primary_fake_edge/${edge_resource_url}/hq_med_700/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="videoBiterate-100" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${biterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2031708578">http://primary_fake_edge/${edge_resource_url}/hq_med_100/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-290" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1708157426">http://primary_fake_edge/${edge_resource_url}/hq_iframe_290/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="iframeBiterate-390" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${iFrameBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88793933">http://primary_fake_edge/${edge_resource_url}/hq_iframe_390/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1610883576">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-460247124">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-36264524">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="599766326">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_4}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="599766326">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_3}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-36264524">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-460247124">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-100-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1610883576">http://primary_fake_edge/${edge_resource_url}/hq_sap_100_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_5}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1471364374">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_sp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-300-jp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_6}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="297257171">http://primary_fake_edge/${edge_resource_url}/hq_sap_300_jp/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-en" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_7}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1422468174">http://primary_fake_edge/${edge_resource_url}/hq_sap_700_en/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-ch" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_8}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify hls tag" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1237850159">#EXTM3U</stringProp>
              <stringProp name="-1035324819">#EXT-X-VERSION:3</stringProp>
              <stringProp name="1269334050">#EXT-X-TARGETDURATION:3</stringProp>
              <stringProp name="1812748139">#EXT-X-I-FRAMES-ONLY</stringProp>
              <stringProp name="-1063226339">#EXT-X-FAXS-CM</stringProp>
              <stringProp name="750455982">#EXT-X-MEDIA-SEQUENCE</stringProp>
              <stringProp name="1265220817">#EXT-X-PLAYLIST-TYPE</stringProp>
              <stringProp name="1792855041">#EXT-X-ALLOW-CACHE:NO</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify segment name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1225351022">http://primary_fake_edge/${edge_resource_url}/hq_sap_700_ch/abc/cd/</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some ad not be inserted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1431687495">http://${edge_2_IP}:8080/origin/playlists/${ad2}</stringProp>
              <stringProp name="1431687526">http://${edge_2_IP}:8080/origin/playlists/${ad3}</stringProp>
              <stringProp name="1431687557">http://${edge_2_IP}:8080/origin/playlists/${ad4}</stringProp>
              <stringProp name="1431687588">http://${edge_2_IP}:8080/origin/playlists/${ad5}</stringProp>
              <stringProp name="1431687619">http://${edge_2_IP}:8080/origin/playlists/${ad6}</stringProp>
              <stringProp name="1431687681">http://${edge_2_IP}:8080/origin/playlists/${ad8}</stringProp>
              <stringProp name="1432636162">http://${edge_2_IP}:8080/origin/playlists/${ad10}</stringProp>
              <stringProp name="1432636286">http://${edge_2_IP}:8080/origin/playlists/${ad14}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify some primary segment be deleted" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-609871655">${audio_1}_01.ts</stringProp>
              <stringProp name="-609752491">${audio_1}_05.ts</stringProp>
              <stringProp name="-609722700">${audio_1}_06.ts</stringProp>
              <stringProp name="-609633327">${audio_1}_09.ts</stringProp>
              <stringProp name="-608977925">${audio_1}_10.ts</stringProp>
              <stringProp name="-608948134">${audio_1}_11.ts</stringProp>
              <stringProp name="-607965031">${audio_1}_23.ts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">There is no any advertisement content in reponse, only rotate ts files from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getEXT-X-CUE:ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CueID</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-CUE:ID)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getKeyTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">KeyTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-KEY:METHOD=.*URI)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getNoneKeytag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">NoneKey</stringProp>
            <stringProp name="RegexExtractor.regex">(EXT-X-KEY:METHOD=NONE)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">trackingId</stringProp>
            <stringProp name="RegexExtractor.regex">.*ID=(.*),DURATION.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDiscontinuityTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Discontinuity</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-DISCONTINUITY)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPrimarySegmentsList" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SegmentsList</stringProp>
            <stringProp name="RegexExtractor.regex">http:\/\/.*\/(.*hq.*)\.ts</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">get sequence number for next check</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getFaxsCMTag" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">CMTag</stringProp>
            <stringProp name="RegexExtractor.regex">(#EXT-X-FAXS-CM:.*)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify all ad count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;all ad number is &quot; + ${CueID_matchNr});

if (${CueID_matchNr}==${AdNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ad number is expected to be &quot;+${AdNumber_expect}+&quot; ,but it&apos;s&quot; + ${CueID_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Key tag number is &quot; + ${KeyTag_matchNr});

if (${KeyTag_matchNr}==${keyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; key tag number is expected to be ${keyNumber_expect} ,but it&apos;s &quot; + ${KeyTag_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify method=None Key tag Count" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;NoneKey tag number is &quot; + ${NoneKey_matchNr});

if (${NoneKey_matchNr}==${NoneKeyNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; NoneKey tag number is expected to be &quot;+ ${NoneKeyNumber_expect} +&quot;,but it&apos;s &quot; + ${NoneKey_matchNr};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify Discontinuity tag number" enabled="true">
            <stringProp name="BeanShellAssertion.query">

if (${Discontinuity_matchNr}==${Discontinuity_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; discontinuity tag number is expected to be &quot;+${Discontinuity_expect}+&quot; ,but it&apos;s&quot; + ${Discontinuity_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify primary segments number" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (${SegmentsList_matchNr}==${PrimarySegmentsNumber_expect})
Failure=false;
else
{Failure=true;
FailureMessage = &quot; segments number is expected to be &quot; +${PrimarySegmentsNumber_expect}+&quot;: but it&apos;s&quot; + ${SegmentsList_matchNr};
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get ID in CUE" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDInCUE</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-CUE:ID=(.*),DURATION=.*,PSN=true.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getADID in trickmode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ADIDInTrickMode</stringProp>
            <stringProp name="RegexExtractor.regex">.*#EXT-X-TRICKMODE-RESTRICTION:ADID=(.*),MODE=fastForward,SCALE=2,LIMIT=Always.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ADID in trickmode" enabled="false">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ID in CUE =&quot; + &quot;${IDInCUE_1}&quot;);
System.out.println(&quot;ADID in trickmode =&quot; + &quot;${ADIDInTrickMode_1}&quot;);


if (&quot;${IDInCUE_1}&quot;.equals(&quot;${ADIDInTrickMode_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; ID IN CUE is &quot; +&quot;${IDInCUE_1}&quot;+&quot; ,but  ADID in trickMode   is &quot; + &quot;${ADIDInTrickMode_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SAP-700-sp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${SAPBiterateContent_9}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get variant manifest after ad decision</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check Placement request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/spotlink-router/adsrs/checkSID/${sid}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetPlacementRequestCallNumber" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Times</stringProp>
            <stringProp name="RegexExtractor.regex">d.*(\d+).*t</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetPartnerId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PartnerIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:Scope&gt;(.*)&lt;/adm:Scope&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getProductType" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ProductTypeInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:ProductType&gt;(.*)&lt;/adm:ProductType&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDeviceId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">DeviceIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&quot;DEVICEID&quot;&gt;(.*)&lt;/adm:TerminalAddress&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getDtz" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">dtzInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;core:CurrentDateTime&gt;(.*)&lt;/core:CurrentDateTime&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getServiceId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ServiceIdInPR</stringProp>
            <stringProp name="RegexExtractor.regex">.*&lt;adm:Service id=&quot;(.*)&quot;&gt;&lt;adm:ProductType&gt;.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify call placement request times" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;vex sended placement request times: &quot; + ${Times_1});

int prTime = ${Times_1};
int expectTime = 1;
if (prTime==expectTime)
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Placemen request is expected to be called &quot; +expectTime+&quot; times ,but it was called &quot; + prTime +&quot; times&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify partnerId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Partner Id set by client: &quot; + &quot;${PartnerId}&quot;);
System.out.println(&quot;Partner Id in PR is : &quot; + &quot;${PartnerIdInPR_1}&quot;);

if (&quot;${PartnerIdInPR_1}&quot;.equals(&quot;${PartnerId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Partner Id was set &quot; +&quot;${PartnerId}&quot;+&quot; by client ,but it was sent out &quot; + &quot;${PartnerIdInPR_1}&quot; +&quot; by vex&quot;;
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify partner Product Type" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Provider Type : &quot; + &quot;${ProductTypeInPR_1}&quot;);

if (&quot;${ProductTypeInPR_1}&quot;.equals(&quot;${StreamType}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Provider Type was send by client is &quot; +&quot;${StreamType}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${ProductTypeInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify DeviceId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Device Id : &quot; + &quot;${DeviceIdInPR_1}&quot;);

if (&quot;${DeviceIdInPR_1}&quot;.equals(&quot;${DeviceId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Device Id was send by client is &quot; +&quot;${DeviceId}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${DeviceIdInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify DTZ" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Current Data time is : &quot; + ${dtzInPR_matchNr});
System.out.println(&quot;Time set by client is : &quot;+ &quot;${client_dtz}&quot;);
System.out.println(&quot;Time in placement request is : &quot;+ &quot;${dtzInPR_1}&quot;);

if (${dtzInPR_matchNr}==1 &amp;&amp; &quot;${client_dtz}&quot;.equals(&quot;${dtzInPR_1}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot;the count of dtz set in placement request was &quot;+${dtzInPR_matchNr +&quot; or dtz in client request is not same with the one in placement request.&quot;};
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Verify ServiceId" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;ServiceIdInPR : &quot; + &quot;${ServiceIdInPR_1}&quot;);

if (&quot;${ServiceIdInPR_1}&quot;.equals(&quot;${ServiceId}&quot;))
Failure=false;
else
{Failure=true;
FailureMessage = &quot; Service Id should be  &quot; +&quot;${ServiceId}&quot;+&quot; ,but it was sent out to SLR by vex is &quot; + &quot;${ServiceIdInPR_1}&quot;;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check vex not send placement request" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="218685603">is not called till now.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="send EndAll PSN" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Client post EndAll psn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;adm:PlacementStatusNotification identity=&quot;86CF2E98-AEBA-4C3A-A3D4-616CF7D74A79&quot; version=&quot;1.1&quot;&#xd;
    messageId=&quot;69a360dd-4e8e-4af4-a333-52abc620e6c9&quot;&#xd;
    xmlns:adm=&quot;http://www.scte.org/schemas/130-3/2008a/adm&quot;&#xd;
    xmlns:core=&quot;http://www.scte.org/schemas/130-2/2008a/core&quot;&gt;&#xd;
    &lt;adm:PlayData identityADS=&quot;1ea15585-1075-4833-86c6-9321695b5ce4&quot;&gt;&#xd;
        &lt;adm:SystemContext&gt;&#xd;
            &lt;adm:Session&gt;${sid}&lt;/adm:Session&gt;&#xd;
        &lt;/adm:SystemContext&gt;&#xd;
        &lt;adm:Client&gt;&#xd;
            &lt;adm:TerminalAddress type=&quot;DEVICEID&quot;&gt;${DeviceId}&#xd;
            &lt;/adm:TerminalAddress&gt;&#xd;
        &lt;/adm:Client&gt;&#xd;
        &lt;adm:Events&gt;&#xd;
            &lt;adm:PlacementStatusEvent time=&quot;2011-06-28T19:56:19.653Z&quot; type=&quot;endAll&quot;&#xd;
                messageRef=&quot;942bad6c-6a55-4dbb-9ff3-d3912c706049&quot;/&gt;&#xd;
        &lt;/adm:Events&gt;&#xd;
    &lt;/adm:PlayData&gt;&#xd;
&lt;/adm:PlacementStatusNotification&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${frontEnd}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/vex-director/PlacementStatusNotification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="check EndAll PSN" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check EndAll PSN " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
            <stringProp name="HTTPSampler.port">8088</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">spotlink-router/adsrs/checkEndAll/${sid}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check PSN from ADS" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="771166160">endAll is called 1 times</stringProp>
                <stringProp name="-71357187">type=&quot;endAll&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check PSN from ADS" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1932608277">is not called till now</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1406787781000</longProp>
        <longProp name="ThreadGroup.end_time">1406787781000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClearAdsTemplate" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spotlink-router/adsrs/ClearVODResponseTemplate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClearSID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spotlink-router/adsrs/clearSID</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="resetEdgeOriginServer" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/origin/api/vodcdvrAds/reset</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear FXCM information" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/fxcm/clear?assetName=${vodLocation}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on default orgin" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on edge_1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear Encrypting information on edge_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/sliced/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on default orgin" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${defaultOrigin_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on edge_1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear header Encrypting information on edge_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_2_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/header/clearAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear endAll message on ads" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${adsServerDNS}</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spotlink-router/adsrs/clearEndAll</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Get playist from origin server to make sure there is ad signal already.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Resonse code " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">Verify there is some ad signal marker in playlist from origin</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear FXCM information" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/fxcm/clear?assetName=${vodLocation}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Clear FXCM information" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${edge_1_DNS}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">origin/api/extKey/fxcm/clear?assetName=${vodLocation}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="clear redirectRule" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${crDNS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/clearAssetRedirectRules</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">/usr/local/automation/logs/${__TestPlanName}_${__time(yyyy-MM-dd-hh-mm,)}.log</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
